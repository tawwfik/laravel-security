<?php

declare (strict_types = 1);

namespace Tawfik\LaravelSecurity\Commands;

/**
 * Secure .htaccess Command
 *
 * Generates a hardened .htaccess file with:
 * - Security headers (HSTS, CSP, X-Frame-Options, etc.)
 * - Access control for sensitive files
 * - HTTPS enforcement
 * - Malicious user-agent blocking
 * - Directory listing prevention
 */
class SecureHtaccess extends BaseSecurityCommand
{
    protected $signature = 'secure:htaccess
                            {--dry-run : Show what would be changed without making changes}
                            {--backup : Create backup before modifications}
                            {--force : Skip confirmation prompts}';

    protected $description = 'Generate a hardened .htaccess file with security headers and access controls';

    protected function executeCommand(): void
    {
        $this->info('ðŸ”’ Generating hardened .htaccess file...');

        if (! $this->validateLaravelApp()) {
            return;
        }

        $htaccessPath = $this->getPublicPath() . '/.htaccess';

        // Backup existing .htaccess if it exists
        if ($this->fileExists($htaccessPath) && $this->option('backup')) {
            $this->backupFile($htaccessPath);
        }

        // Generate hardened .htaccess content
        $content = $this->generateHtaccessContent();

        if ($this->writeFile($htaccessPath, $content)) {
            $this->addResult('Created', 'Hardened .htaccess file with security headers and access controls');
            $this->addResult('Features', 'HSTS, CSP, X-Frame-Options, malicious user-agent blocking');
            $this->addResult('Protection', 'Sensitive files access control and HTTPS enforcement');
        }
    }

    /**
     * Generate hardened .htaccess content
     */
    private function generateHtaccessContent(): string
    {
        $content = "# Laravel Security Hardened .htaccess\n";
        $content .= "# Generated by Laravel Security Package\n";
        $content .= "# " . date('Y-m-d H:i:s') . "\n\n";

        // 1. Force HTTPS redirect
        $content .= "# Force HTTPS\n";
        $content .= "<IfModule mod_rewrite.c>\n";
        $content .= "    RewriteEngine On\n";
        $content .= "    RewriteCond %{HTTPS} off\n";
        $content .= "    RewriteRule ^(.*)$ https://%{HTTP_HOST}%{REQUEST_URI} [L,R=301]\n";
        $content .= "</IfModule>\n\n";

        // 2. Block access to sensitive files
        $content .= "# Block access to sensitive files\n";
        $blockedFiles = config('laravel-security.htaccess.blocked_files', []);
        foreach ($blockedFiles as $file) {
            $content .= "<Files \"{$file}\">\n";
            $content .= "    Order allow,deny\n";
            $content .= "    Deny from all\n";
            $content .= "</Files>\n";
        }
        $content .= "\n";

        // 3. Block malicious user agents
        $content .= "# Block malicious user agents\n";
        $blockedAgents = config('laravel-security.htaccess.blocked_user_agents', []);
        if (! empty($blockedAgents)) {
            $content .= "<IfModule mod_rewrite.c>\n";
            $content .= "    RewriteEngine On\n";
            foreach ($blockedAgents as $agent) {
                $content .= "    RewriteCond %{HTTP_USER_AGENT} {$agent} [NC]\n";
            }
            $content .= "    RewriteRule .* - [F,L]\n";
            $content .= "</IfModule>\n\n";
        }

        // 4. Security headers
        $content .= "# Security Headers\n";
        $securityHeaders = config('laravel-security.htaccess.security_headers', []);
        foreach ($securityHeaders as $header => $value) {
            $content .= "Header always set {$header} \"{$value}\"\n";
        }
        $content .= "\n";

        // 5. HSTS (HTTP Strict Transport Security)
        $hstsConfig = config('laravel-security.htaccess.hsts', []);
        if ($hstsConfig['enabled'] ?? true) {
            $hstsValue = "max-age=" . ($hstsConfig['max_age'] ?? 31536000);
            if ($hstsConfig['include_subdomains'] ?? true) {
                $hstsValue .= "; includeSubDomains";
            }
            if ($hstsConfig['preload'] ?? true) {
                $hstsValue .= "; preload";
            }
            $content .= "# HSTS (HTTP Strict Transport Security)\n";
            $content .= "Header always set Strict-Transport-Security \"{$hstsValue}\"\n\n";
        }

        // 6. Content Security Policy
        $cspConfig = config('laravel-security.htaccess.csp', []);
        if ($cspConfig['enabled'] ?? true) {
            $cspDirectives = [];
            foreach ($cspConfig as $directive => $value) {
                if ($directive !== 'enabled') {
                    $cspDirectives[] = "{$directive} {$value}";
                }
            }
            $cspValue = implode('; ', $cspDirectives);
            $content .= "# Content Security Policy\n";
            $content .= "Header always set Content-Security-Policy \"{$cspValue}\"\n\n";
        }

        // 7. Disable directory listing
        $content .= "# Disable directory listing\n";
        $content .= "Options -Indexes\n\n";

        // 8. Disable server signature
        $content .= "# Disable server signature\n";
        $content .= "ServerSignature Off\n\n";

        // 9. Prevent access to backup files
        $content .= "# Prevent access to backup files\n";
        $content .= "<FilesMatch \"\\.(bak|backup|old|orig|save|swp|tmp|temp)$\">\n";
        $content .= "    Order allow,deny\n";
        $content .= "    Deny from all\n";
        $content .= "</FilesMatch>\n\n";

        // 10. Prevent access to configuration files
        $content .= "# Prevent access to configuration files\n";
        $content .= "<FilesMatch \"\\.(env|config|ini|conf|json|lock|log|sql)$\">\n";
        $content .= "    Order allow,deny\n";
        $content .= "    Deny from all\n";
        $content .= "</FilesMatch>\n\n";

        // 11. Laravel specific rules
        $content .= "# Laravel specific rules\n";
        $content .= "<IfModule mod_rewrite.c>\n";
        $content .= "    RewriteEngine On\n";
        $content .= "    \n";
        $content .= "    # Handle Authorization Header\n";
        $content .= "    RewriteCond %{HTTP:Authorization} .\n";
        $content .= "    RewriteRule .* - [E=HTTP_AUTHORIZATION:%{HTTP:Authorization}]\n";
        $content .= "    \n";
        $content .= "    # Redirect Trailing Slashes If Not A Folder...\n";
        $content .= "    RewriteCond %{REQUEST_FILENAME} !-d\n";
        $content .= "    RewriteCond %{REQUEST_URI} (.+)/$\n";
        $content .= "    RewriteRule ^ %1 [L,R=301]\n";
        $content .= "    \n";
        $content .= "    # Send Requests To Front Controller...\n";
        $content .= "    RewriteCond %{REQUEST_FILENAME} !-d\n";
        $content .= "    RewriteCond %{REQUEST_FILENAME} !-f\n";
        $content .= "    RewriteRule ^ index.php [L]\n";
        $content .= "</IfModule>\n\n";

        // 12. Additional security measures
        $content .= "# Additional security measures\n";
        $content .= "<IfModule mod_headers.c>\n";
        $content .= "    # Prevent MIME type sniffing\n";
        $content .= "    Header always set X-Content-Type-Options nosniff\n";
        $content .= "    \n";
        $content .= "    # Prevent clickjacking\n";
        $content .= "    Header always set X-Frame-Options DENY\n";
        $content .= "    \n";
        $content .= "    # Enable XSS protection\n";
        $content .= "    Header always set X-XSS-Protection \"1; mode=block\"\n";
        $content .= "    \n";
        $content .= "    # Referrer Policy\n";
        $content .= "    Header always set Referrer-Policy \"strict-origin-when-cross-origin\"\n";
        $content .= "    \n";
        $content .= "    # Permissions Policy\n";
        $content .= "    Header always set Permissions-Policy \"camera=(), microphone=(), geolocation=(), payment=(), usb=()\"\n";
        $content .= "</IfModule>\n\n";

        // 13. Rate limiting (if mod_ratelimit is available)
        $content .= "# Rate limiting (requires mod_ratelimit)\n";
        $content .= "<IfModule mod_ratelimit.c>\n";
        $content .= "    # Limit requests per IP\n";
        $content .= "    SetOutputFilter RATE_LIMIT\n";
        $content .= "    SetEnv rate-limit 400\n";
        $content .= "</IfModule>\n\n";

        // 14. Compression and caching
        $content .= "# Enable compression\n";
        $content .= "<IfModule mod_deflate.c>\n";
        $content .= "    AddOutputFilterByType DEFLATE text/plain\n";
        $content .= "    AddOutputFilterByType DEFLATE text/html\n";
        $content .= "    AddOutputFilterByType DEFLATE text/xml\n";
        $content .= "    AddOutputFilterByType DEFLATE text/css\n";
        $content .= "    AddOutputFilterByType DEFLATE application/xml\n";
        $content .= "    AddOutputFilterByType DEFLATE application/xhtml+xml\n";
        $content .= "    AddOutputFilterByType DEFLATE application/rss+xml\n";
        $content .= "    AddOutputFilterByType DEFLATE application/javascript\n";
        $content .= "    AddOutputFilterByType DEFLATE application/x-javascript\n";
        $content .= "</IfModule>\n\n";

        // 15. Cache control
        $content .= "# Cache control\n";
        $content .= "<IfModule mod_expires.c>\n";
        $content .= "    ExpiresActive on\n";
        $content .= "    ExpiresByType text/css \"access plus 1 year\"\n";
        $content .= "    ExpiresByType application/javascript \"access plus 1 year\"\n";
        $content .= "    ExpiresByType image/png \"access plus 1 year\"\n";
        $content .= "    ExpiresByType image/jpg \"access plus 1 year\"\n";
        $content .= "    ExpiresByType image/jpeg \"access plus 1 year\"\n";
        $content .= "    ExpiresByType image/gif \"access plus 1 year\"\n";
        $content .= "    ExpiresByType image/ico \"access plus 1 year\"\n";
        $content .= "    ExpiresByType image/icon \"access plus 1 year\"\n";
        $content .= "    ExpiresByType text/plain \"access plus 1 month\"\n";
        $content .= "    ExpiresByType application/pdf \"access plus 1 month\"\n";
        $content .= "    ExpiresByType application/x-shockwave-flash \"access plus 1 month\"\n";
        $content .= "</IfModule>\n";

        return $content;
    }
}
